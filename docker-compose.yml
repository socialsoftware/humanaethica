services:
  postgres:
    image: postgres:alpine
    container_name: humanaethica-postgres
    command: postgres -c 'max_connections=50' -c 'log_statement=all' -c 'log_destination=stderr'
    ports:
      - "5433:5432"
    restart: unless-stopped
    volumes:
      - ./data/dumps:/dumps
    env_file:
      - ./data/env/database.dev.env
      
  backend:
    build:
      context: ./backend/
      args:
        PROFILE: dev
    image: humanaethica-backend
    container_name: humanaethica-backend
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    restart: unless-stopped
    volumes:
      - ./data/images:/images
      - ./data/load:/load
      - ./data/export:/export
    env_file:
      - ./data/env/backend.dev.env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/hedb

  frontend:
    build:
      context:  ./frontend/
      dockerfile: Dockerfile
      args:
        NODE_ENV: dev
    image: humanaethica-frontend                                                     
    container_name: humanaethica-frontend
    depends_on:
      - backend
    ports:
      - "8081:80"
    restart: unless-stopped
    volumes:
      - ./data/localhost-nginx.conf:/etc/nginx/nginx.conf
      - ./data/error.log:/var/log/nginx/error.log
      - ./data/access.log:/var/log/nginx/access.log

  be-unit-tests:
    image: maven:3.9.6-eclipse-temurin-21
    stop_signal: SIGKILL
    stdin_open: true
    tty: true
    volumes:
      - ./backend:/backend
      - ~/.m2:/root/.m2
    command: mvn -f /backend/pom.xml clean -Ptest test -Dtest="${UNIT}"

  integration-tests:
    image: maven:3.9.6-eclipse-temurin-21
    stop_signal: SIGKILL
    stdin_open: true
    tty: true
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/hedb
      - PSQL_INT_TEST_DB_USERNAME=engineer
      - PSQL_INT_TEST_DB_PASSWORD=password
    volumes:
      - ./backend:/backend
      - ~/.m2:/root/.m2
    command: mvn -f /backend/pom.xml clean -Ptest-int integration-test -Dit.test="${INTEGRATION}"

  e2e-run:
    image: cypress/included
    build:
      context:  ./frontend/
      dockerfile: Dockerfile_cy
    container_name: cypress-run
    depends_on:
      - frontend
      - postgres
    env_file:
      - data/env/cypress-run.env
    working_dir: /app
    command: npx cypress run
    volumes:
      - ./frontend/cypress:/app/cypress
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/cypress.config.ts:/app/cypress.config.ts
      - ./frontend/tests:/app/tests

  e2e-open:
    image: cypress/browsers:node-20.18.0-chrome-130.0.6723.69-1-ff-131.0.3-edge-130.0.2849.52-1
    build:
      context:  ./frontend/
      dockerfile: Dockerfile_cy
    container_name: cypress-open
    depends_on:
      - frontend
      - postgres
    env_file:
      - ./data/env/cypress-open.env
    environment:
      - DISPLAY=${DISPLAY}
    working_dir: /app
    command: npx cypress open
    volumes:
      - ./frontend/cypress:/app/cypress
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/cypress.config.ts:/app/cypress.config.ts
      - ./frontend/tests:/app/tests
      - /tmp/.X11-unix:/tmp/.X11-unix
    network_mode: host
